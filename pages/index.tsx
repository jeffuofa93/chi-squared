import type { NextPage } from "next";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import { useState } from "react";

const Home: NextPage = () => {
  const rowLabels = ["White Collar", "Blue Collar", "No Collar"];

  const initialData = [
    [90, 60, 104, 95],
    [30, 50, 51, 20],
    [30, 40, 45, 35],
  ];

  const [observedData, setObservedData] = useState(initialData);

  const createSumRow = (observedData: number[][]) =>
    Array(observedData.length)
      .fill(0)
      .map((_, row) => observedData[row].reduce((a, b) => a + b, 0));

  const createSumColumn = (observedData: number[][]) =>
    Array(observedData[0].length)
      .fill(0)
      .map((_, col) => observedData.reduce((a, b) => a + b[col], 0));

  const calcTotal = (observedData: number[][]) =>
    observedData.reduce((a, b) => a + b.reduce((c, d) => c + d, 0), 0);

  const rowSums: number[] = new Array(observedData.length).fill(0);
  const colSums: number[] = new Array(observedData[0].length).fill(0);

  const [rowTotals, setRowTotals] = useState(rowSums);
  const [colTotals, setColTotals] = useState(colSums);
  const [total, setTotal] = useState(0);

  const calcChiSquared = (
    observedData: number[][],
    rowTotals: number[],
    colTotals: number[],
    total: number
  ) => {
    const calcExpected = (i: number, j: number) =>
      (rowTotals[i] * colTotals[j]) / total;

    return observedData.reduce(
      (a, b, i) =>
        a +
        b.reduce(
          (c, d, j) =>
            c + Math.pow(d - calcExpected(i, j), 2) / calcExpected(i, j),
          0
        ),
      0
    );
  };

  const [chiSquare, setChiSquare] = useState(0);

  const handleCellChange = (i: number, j: number, event: any) => {
    const newTable = [...observedData];
    newTable[i][j] = parseInt(event.target.value);
    setObservedData(newTable);
  };

  const handleReset = () => {
    const newTable = [...initialData];
    const rowTotals = [...rowSums];
    const colTotals = [...colSums];
    const total = 0;
    const chiSquare = 0;
    setObservedData(newTable);
    setRowTotals(rowTotals);
    setColTotals(colTotals);
    setTotal(total);
    setChiSquare(chiSquare);
  };

  const handleCalcChiSquare = () => {
    const rowTotals = createSumRow(observedData);
    const colTotals = createSumColumn(observedData);
    const total = calcTotal(observedData);
    const chiSquare = calcChiSquared(observedData, rowTotals, colTotals, total);
    setRowTotals(rowTotals);
    setColTotals(colTotals);
    setTotal(total);
    setChiSquare(chiSquare);
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Chi Squared</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>Javascript Chi Squared Assignment</h1>

        <table>
          <tbody>
            <tr>
              <td className={styles.tableTitle} colSpan={6} align={"center"}>
                Neighborhood
              </td>
            </tr>
            <tr>
              <td>Job Category</td>
              <td align={"center"}>A</td>
              <td align={"center"}>B</td>
              <td align={"center"}>C</td>
              <td align={"center"}>D</td>
              <td align={"center"}>Sum of Rows</td>
            </tr>
            {observedData.map((row, i) => (
              <tr key={i}>
                <td>{rowLabels[i]}</td>
                {row.map((col, j) => (
                  <td key={`${i},${j}`}>
                    <input
                      type="number"
                      name="table"
                      value={observedData[i][j]}
                      onChange={(e) => handleCellChange(i, j, e)}
                    />
                  </td>
                ))}
                <td key={`sum_row: ${i}`}>
                  <input type="number" value={rowTotals[i]} readOnly={true} />
                </td>
              </tr>
            ))}

            <tr>
              <td>Sum of Columns</td>
              {colTotals.map((col, i) => (
                <td key={`sum_col: ${i}`}>
                  <input type="number" value={colTotals[i]} readOnly={true} />
                </td>
              ))}
              <td>
                <input type="number" value={total} readOnly={true} />
              </td>
            </tr>
          </tbody>
        </table>

        <div className={styles.reset}>
          <label>Chi Square:</label>
          <input type="number" value={chiSquare.toFixed(2)} readOnly={true} />
        </div>

        <div className={styles.reset}>
          <button onClick={handleCalcChiSquare}>Calculate Chi Squared</button>
        </div>

        <div className={styles.reset}>
          <button onClick={handleReset}>Reset</button>
        </div>
      </main>
    </div>
  );
};

export default Home;
